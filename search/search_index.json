{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Principles of Artificial Intelligence","text":"<p>A comprehensive set of study notes based on Nils J. Nilsson\u2019s classic textbook.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Chapter 1: Production Systems</li> <li>Chapter 2: Search and Control Strategies</li> </ul> <ul> <li>Glossary: AI Terms and Concepts</li> <li>About: Project Background</li> </ul> <p>\u201cThe study of intelligence is the study of computation that makes it possible to perceive, reason, and act.\u201d \u2014 Nils J. Nilsson</p>"},{"location":"about/","title":"About","text":"<p>some notes</p>"},{"location":"chapters/_template/","title":"Chapter X \u2013 [Title]","text":""},{"location":"chapters/_template/#overview","title":"Overview","text":""},{"location":"chapters/_template/#core-concepts","title":"Core Concepts","text":""},{"location":"chapters/_template/#key-mechanisms","title":"Key Mechanisms","text":""},{"location":"chapters/_template/#examples","title":"Examples","text":""},{"location":"chapters/_template/#study-notes","title":"Study Notes","text":""},{"location":"chapters/_template/#exercises","title":"Exercises","text":""},{"location":"chapters/chapter1-production-systems/","title":"Chapter 1 \u2013 PRODUCTION SYSTEMS AND AI","text":""},{"location":"chapters/chapter1-production-systems/#overview","title":"Overview","text":"<p>This foundational chapter introduces the production system as the fundamental architectural model for artificial intelligence systems. The core thesis is that most AI systems can be understood through a clean separation between data, operations, and control. The chapter systematically explores:</p> <ul> <li>The three core components of production systems (global database, production rules, control system)</li> <li>Different control strategies (irrevocable, backtracking, graph-search)</li> <li>Problem representation techniques</li> <li>Specialized production systems (commutative and decomposable)</li> <li>Real-world applications across various domains</li> <li>Historical context and bibliographical references</li> </ul> <p>The production system model provides a unified framework for understanding how knowledge is organized and utilized in AI systems, distinguishing between declarative, procedural, and control knowledge.</p>"},{"location":"chapters/chapter1-production-systems/#core-concepts","title":"Core Concepts","text":""},{"location":"chapters/chapter1-production-systems/#11-production-systems-fundamentals","title":"1.1 Production Systems Fundamentals","text":"<p>Global Database: - The central data structure representing the current state of the problem-solving process - Can range from simple (3\u00d73 matrix for 8-puzzle) to complex (relational, indexed file structures) - Contains the \"declarative knowledge\" - facts about the current problem state - Should not be confused with traditional database management systems - Various data structures can be used: symbol strings, vectors, sets, arrays, trees, lists</p> <p>Production Rules: - Condition-action pairs that operate on the global database - Each rule has a precondition that must be satisfied by the database for the rule to be applicable - Rules change the database when applied - Key features:   - All rules can access the entire global database   - Rules don't \"call\" other rules directly   - Communication between rules occurs only through the global database   - Highly modular - changes can be made relatively independently</p> <p>Control System: - Selects which applicable rule to apply at each step - Determines when computation should cease (when termination condition is satisfied) - Responsible for keeping track of rules applied to compose the solution sequence - Operates as a search process when perfect knowledge isn't available</p>"},{"location":"chapters/chapter1-production-systems/#12-problem-representation","title":"1.2 Problem Representation","text":"<p>The Representation Problem: - Transforming a problem statement into the three production system components - Multiple possible representations for any given problem - Selection of good representation is crucial for efficient problem solving</p> <p>Key Elements for Problem Solving: - Problem States: Different configurations in the problem space - Moves: Operations that transform one state to another - Goal: The target state or condition to be achieved</p> <p>State Space Considerations: - Size of problem space greatly affects solution difficulty - Some representations can collapse large spaces into manageable ones - Reformulation can dramatically reduce search complexity</p>"},{"location":"chapters/chapter1-production-systems/#13-control-strategy-taxonomy","title":"1.3 Control Strategy Taxonomy","text":"<p>Irrevocable Control: - Selected rules are applied permanently without reconsideration - Appropriate when local knowledge reliably leads to global solution - Example: Hill-climbing in function optimization</p> <p>Tentative Control: - Rules are applied provisionally with ability to reconsider - Two subtypes:   - Backtracking: Establish backtracking points; revert to previous point when difficulties arise   - Graph-Search: Maintain multiple paths simultaneously using graph structures</p>"},{"location":"chapters/chapter1-production-systems/#14-search-direction","title":"1.4 Search Direction","text":"<p>Forward Production Systems: - Work from initial state toward goal state - Use F-rules applied to state descriptions - Efficient when few initial states, many goal states</p> <p>Backward Production Systems: - Work from goal state toward initial state - Use B-rules applied to goal descriptions - Efficient when few goal states, many initial states</p> <p>Bidirectional Systems: - Search from both directions simultaneously - Require matching condition between state and goal descriptions - Control must decide whether to apply F-rules or B-rules at each step</p>"},{"location":"chapters/chapter1-production-systems/#15-specialized-production-systems","title":"1.5 Specialized Production Systems","text":"<p>Commutative Production Systems: - Properties:   1. Rules applicable to database D remain applicable to any database produced by applying applicable rules to D   2. Goal condition satisfied by D remains satisfied after applying any applicable rule   3. Database resulting from applying any sequence of applicable rules is invariant under sequence permutations - Eliminates redundant path exploration - Enables irrevocable control even in search contexts</p> <p>Decomposable Production Systems: - Global database can be split into independent components - Components can be processed separately (possibly in parallel) - Use AND/OR graphs for representation:   - AND nodes: All components must be processed (circular arc connection)   - OR nodes: Only one path needed for solution - Terminal nodes satisfy termination condition</p>"},{"location":"chapters/chapter1-production-systems/#key-mechanisms","title":"Key Mechanisms","text":""},{"location":"chapters/chapter1-production-systems/#21-basic-production-system-algorithm","title":"2.1 Basic Production System Algorithm","text":"<p>Procedure PRODUCTION: <pre><code>1 DATA \u2190 initial database\n2 until DATA satisfies the termination condition, do:\n3 begin\n4   select some rule, R, in the set of rules that can be applied to DATA\n5   DATA \u2190 result of applying R to DATA\n6 end\n</code></pre></p> <p>This nondeterministic algorithm requires specification of rule selection in step 4.</p>"},{"location":"chapters/chapter1-production-systems/#22-hill-climbing-control","title":"2.2 Hill-Climbing Control","text":"<p>Mechanism: - Use real-valued evaluation function on global databases - Function should attain highest value for goal states - Select applicable rule that produces largest increase in function value - If no increase possible, select rule that doesn't decrease value</p> <p>Limitations: - Local maxima: Process gets stuck at non-optimal points - Plateaus: No improvement possible from current state - Ridges: Sequence of local maxima preventing progress</p>"},{"location":"chapters/chapter1-production-systems/#23-backtracking-control","title":"2.3 Backtracking Control","text":"<p>Implementation Rules: - Backup occurs when:   - State description repeats on current path   - Depth bound exceeded (fixed number of rules applied without reaching goal)   - No applicable rules remain - Uses arbitrary or informed rule selection schemes - More efficient with good rule-selection knowledge</p>"},{"location":"chapters/chapter1-production-systems/#24-graph-search-control","title":"2.4 Graph-Search Control","text":"<p>Search Trees: - Root node: Initial state description - Arcs: Rule applications - Descendant nodes: States reachable in one move - Grows until termination condition satisfied - Intelligent control focuses tree growth toward goal</p>"},{"location":"chapters/chapter1-production-systems/#25-decomposable-system-procedure","title":"2.5 Decomposable System Procedure","text":"<p>Procedure SPLIT: <pre><code>1 DATA \u2190 initial database\n2 {Di} \u2190 decomposition of DATA\n3 until all {Di} satisfy termination condition, do:\n4 begin\n5   select D* from among {Di} not satisfying termination condition\n6   remove D* from {Di}\n7   select rule R applicable to D*\n8   D \u2190 result of applying R to D*\n9   {di} \u2190 decomposition of D\n10  append {di} to {Di}\n11 end\n</code></pre></p> <p>Component Processing Strategies: - Fixed order: Process components in predetermined sequence - Dynamic reordering: Reorder components during processing - AND/OR graph representation tracks dependencies</p>"},{"location":"chapters/chapter1-production-systems/#examples","title":"Examples","text":""},{"location":"chapters/chapter1-production-systems/#31-the-8-puzzle","title":"3.1 The 8-Puzzle","text":"<p>Problem Specification: - 8 numbered tiles in 3\u00d73 frame with one empty cell - Move adjacent tiles into empty space (equivalent to moving blank)</p> <p>Production System Setup: - Global Database: 3\u00d73 array representing tile configuration - Rules: Move blank left/up/right/down (with preconditions for boundary cases) - Termination Condition: Specific goal configuration achieved</p> <p>Control Strategy Examples: - Hill-climbing: Use negative of tiles out of place as evaluation function - Backtracking: Try moves in fixed order (left, up, right, down) with depth bound - Graph-search: Build complete search tree of possible moves</p>"},{"location":"chapters/chapter1-production-systems/#32-traveling-salesman-problem","title":"3.2 Traveling Salesman Problem","text":"<p>Problem: Visit 5 cities with minimal total distance, starting and ending at A</p> <p>Production System Setup: - Global Database: List of cities visited so far (initial: (A)) - Rules: Go to city X next (if legal - no repeats except final return to A) - Termination Condition: List begins/ends with A, contains all other cities once</p> <p>Search Tree Characteristics: - Edges labeled with distance increments - Multiple paths to same intermediate state - Requires finding minimal cost path</p>"},{"location":"chapters/chapter1-production-systems/#33-syntax-analysis-problem","title":"3.3 Syntax Analysis Problem","text":"<p>Problem: Determine if symbol string is valid sentence in given grammar</p> <p>Production System Setup: - Global Database: String of terminal and non-terminal symbols - Rules: Grammar rewrite rules (replace left-hand side with right-hand side) - Termination Condition: Database contains single symbol S</p> <p>Grammar Example: - Terminal symbols: of, approves, new, president, company, sale, the - Non-terminal symbols: S, NP, VP, PP, P, V, DNP, DET, A, N - Rewrite rules: DNP VP \u2192 S, V DNP \u2192 VP, etc.</p>"},{"location":"chapters/chapter1-production-systems/#34-chemical-structure-generation-dendral","title":"3.4 Chemical Structure Generation (DENDRAL)","text":"<p>Problem: Propose plausible chemical structures given formula</p> <p>Production System Setup: - Global Database: Partially structured compound representation - Rules: Structure-proposing rules converting unstructured formulas to partial structures - Termination Condition: No unstructured formulas remain</p> <p>Example: C\u2085H\u2081\u2082 - Initial database: unstructured formula C\u2085H\u2081\u2082 - Rules propose partial structures with structured and unstructured components - AND/OR tree represents candidate structures - Solution trees correspond to complete structures (e.g., pentane)</p>"},{"location":"chapters/chapter1-production-systems/#35-symbolic-integration-saint","title":"3.5 Symbolic Integration (SAINT)","text":"<p>Problem: Find indefinite integral of given expression</p> <p>Production System Setup: - Global Database: Integral expression to be solved - Rules: Integration techniques (by parts, substitution, decomposition, etc.) - Termination Condition: Expression matches basic integral form in table</p> <p>Rule Types: - Algebraic substitutions - Trigonometric substitutions - Numerator/denominator division - Completing the square - Sum decomposition</p> <p>AND/OR Tree Features: - Nodes represent expressions to integrate - Terminal nodes match integral table forms - Solution tree provides integration path - Final answer computed from solution tree</p>"},{"location":"chapters/chapter1-production-systems/#study-notes","title":"Study Notes","text":""},{"location":"chapters/chapter1-production-systems/#41-critical-distinctions","title":"4.1 Critical Distinctions","text":"<p>Production Systems vs. Conventional Systems: - No hierarchical program organization - Global database accessibility - Rule modularity enables evolutionary development - Changes can be made relatively independently</p> <p>Knowledge Organization: - Declarative Knowledge: Facts in global database - Procedural Knowledge: Operations in production rules - Control Knowledge: Strategy in control system</p> <p>Problem vs. System Types: - Distinctions drawn between system types, not problem types - Same problem can be solved by different system types - Choice depends on problem characteristics and available knowledge</p>"},{"location":"chapters/chapter1-production-systems/#42-efficiency-considerations","title":"4.2 Efficiency Considerations","text":"<p>Representation Impact: - Good representations have small state spaces - May recognize symmetries or useful rule sequences - Example: 8-puzzle \"move blank\" vs. \"move tile\" representations</p> <p>Control Strategy Selection: - Irrevocable: When wrong moves don't foreclose solutions - Backtracking: When wrong moves cause dead ends - Graph-search: When multiple paths need simultaneous exploration</p> <p>Commutative Systems: - Avoid redundant path exploration - Only initially applicable rules can be arbitrarily reordered - Newly applicable rules after rule application cannot necessarily be reordered</p>"},{"location":"chapters/chapter1-production-systems/#43-historical-context","title":"4.3 Historical Context","text":"<p>Theoretical Foundations: - Post (1943): String replacement rules - Markov algorithms: Ordered replacement rules - Newell &amp; Simon: Human problem-solving modeling</p> <p>Evolution of Terminology: - Production systems \u2192 Rule-based systems \u2192 Blackboard systems \u2192 Pattern-directed inference systems</p> <p>Key Systems: - DENDRAL: Chemical structure elucidation - SAINT/SIN: Symbolic integration - UNDERSTAND: Natural language to problem representation</p>"},{"location":"chapters/chapter1-production-systems/#exercises","title":"Exercises","text":""},{"location":"chapters/chapter1-production-systems/#51-missionaries-and-cannibals-problem","title":"5.1 Missionaries and Cannibals Problem","text":"<p>Task: Specify production system components - Global Database: State representation (missionaries/cannibals on each side, boat position) - Rules: Legal boat moves ensuring cannibals never outnumber missionaries - Termination Condition: All on opposite side - Hill-climbing function: Maximize people on destination side - Compare irrevocable vs. backtracking control using this function</p>"},{"location":"chapters/chapter1-production-systems/#52-water-jug-problem","title":"5.2 Water-Jug Problem","text":"<p>Task: Represent 5-liter/2-liter jug problem - Global Database: Current water amounts in both jugs - Rules: Pour between jugs, fill, empty operations - Termination Condition: Precisely 1 liter in 2-liter jug</p>"},{"location":"chapters/chapter1-production-systems/#53-sentence-generation","title":"5.3 Sentence Generation","text":"<p>Task: Use grammar rules to generate sentences - Global Database: Evolving symbol string - Rules: Grammar rewrite rules in generative direction - Termination Condition: Complete sentence with only terminal symbols - Generate five grammatical sentences</p>"},{"location":"chapters/chapter1-production-systems/#54-ancestry-verification","title":"5.4 Ancestry Verification","text":"<p>Task: Compare search directions for ancestry proof - Analysis: Consider branching factors in family trees - Typically easier to verify ancestry by working from descendant to ancestor (fewer ancestors than descendants)</p>"},{"location":"chapters/chapter1-production-systems/#55-commutative-system-proof","title":"5.5 Commutative System Proof","text":"<p>Task: Show rule set invariance under invertible rules - If rule R has inverse R\u207b\u00b9, then applicable rules to D and R(D) are identical - Proof involves showing applicability conditions preserved</p>"},{"location":"chapters/chapter1-production-systems/#56-integer-set-production-system","title":"5.6 Integer Set Production System","text":"<p>Task: Prove commutativity of integer set system - Rules: Add product of any two elements to set - Show all three commutative properties hold</p>"},{"location":"chapters/chapter1-production-systems/#57-decimal-to-binary-conversion","title":"5.7 Decimal to Binary Conversion","text":"<p>Task: Design production system for base conversion - Global Database: Number in decimal and/or binary representation - Rules: Division by 2, remainder handling, digit placement - Demonstrate conversion of 141</p>"},{"location":"chapters/chapter1-production-systems/#58-backtracking-discussion","title":"5.8 Backtracking Discussion","text":"<p>Task: Critically analyze backtracking with multiple paths - Discuss when backtracking avoids vs. duplicates path exploration - Consider graph vs. tree structures</p>"},{"location":"chapters/chapter1-production-systems/#59-backtracking-in-split-procedure","title":"5.9 Backtracking in SPLIT Procedure","text":"<p>Task: Analyze step 5 as backtracking point - Discuss implications for component selection - Compare SPLIT with backtracking vs. PRODUCTION with backtracking - Consider component processing order effects</p>"},{"location":"chapters/chapter2-search-and-control-strategies/","title":"Chapter X \u2013 [Title]","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#overview","title":"Overview","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#core-concepts","title":"Core Concepts","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#key-mechanisms","title":"Key Mechanisms","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#examples","title":"Examples","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#study-notes","title":"Study Notes","text":""},{"location":"chapters/chapter2-search-and-control-strategies/#exercises","title":"Exercises","text":""},{"location":"summaries/exercises/","title":"Exercises","text":"<ul> <li>this is here just as a place holder </li> </ul>"},{"location":"summaries/glossary/","title":"Glossary","text":"<ul> <li>Production System: Database + Rules + Control.</li> </ul>"},{"location":"summaries/key-terms/","title":"Key terms","text":"<ul> <li>Declarative knowledge</li> <li>Procedural knowledge</li> <li>Commutative system</li> <li>Decomposable system</li> </ul>"}]}